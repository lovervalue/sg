<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:cache="http://www.springframework.org/schema/cache"
       xmlns:redisson="http://redisson.org/schema/redisson"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
                        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
                        http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
                        http://www.springframework.org/schema/context
                        http://www.springframework.org/schema/context/spring-context.xsd
                        http://redisson.org/schema/redisson
                        http://redisson.org/schema/redisson/redisson.xsd">

    <!-- 启用缓存注解功能，这个是必须的，否则注解不会生效，另外，该注解一定要声明在spring主配置文件中才会生效 -->
    <cache:annotation-driven cache-manager="cacheManager" key-generator="customKeyGenerator"/>
    <!-- spring自己的缓存管理器，这里定义了缓存位置名称 ，即注解中的value -->
    <bean id="cacheManager" class="org.springframework.cache.support.SimpleCacheManager">
        <property name="caches">
            <set>
                <!-- 这里可以配置多个redis -->
                <bean class="org.springframework.data.redis.cache.RedisCache">
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="default"/>
                    <constructor-arg name="prefix" value="DEFAULT:"/> <!--这是通用的前缀-->
                    <constructor-arg name="expiration" value="1800"/> <!--这里的单位是秒-->
                </bean>
                <bean class="com.sofn.core.config.RedisCache">
                    <property name="redisTemplate" ref="stringRedisTemplate"/>
                    <property name="name" value="common"/>
                    <!-- common名称要在类或方法的注解中使用 -->
                </bean>
                <bean class="com.sofn.core.config.CustomTwoLevelCache">
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="regionCache"/>
                    <constructor-arg name="prefix" value="REGION:"/> <!--这是通用的前缀-->
                    <constructor-arg name="expiration" value="3600"/> <!--二级缓存失效时间（秒）-->
                    <constructor-arg name="oneLevelCacheExpiration" value="3600" /> <!-- 一级缓存失效时间（秒）-->
                    <constructor-arg name="refreshExpiration" value="false" /> <!-- 是否刷新缓存失效时间 -->
                </bean>
                <bean class="com.sofn.core.config.CustomTwoLevelCache">
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="menusCache"/>
                    <constructor-arg name="prefix" value="MENU_CACHE:"/> <!--这是通用的前缀-->
                    <constructor-arg name="expiration" value="7200"/> <!-- 二级缓存失效时间，这里的单位是秒-->
                    <constructor-arg name="oneLevelCacheExpiration" value="2400" /> <!-- 一级缓存失效时间（秒）-->
                    <constructor-arg name="refreshExpiration" value="false" /> <!-- 是否刷新缓存失效时间 -->
                </bean>
                <bean class="com.sofn.core.config.CustomTwoLevelCache">
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="subjEntCache"/> <!--生产经营主体查询缓存-->
                    <constructor-arg name="prefix" value="SUBJ_ENT_CACHE:"/> <!--这是通用的前缀-->
                    <constructor-arg name="expiration" value="360"/> <!-- 二级缓存失效时间，这里的单位是秒-->
                    <constructor-arg name="oneLevelCacheExpiration" value="360" /> <!-- 一级缓存失效时间（秒）-->
                    <constructor-arg name="refreshExpiration" value="false" /> <!-- 是否刷新缓存失效时间 -->
                </bean>
                <bean class="com.sofn.core.config.CustomRedisCache">
                    <constructor-arg name="redisOperations" ref="redisTemplate"/>
                    <constructor-arg name="name" value="qrySubjEntCache"/>
                    <constructor-arg name="prefix" value="SUBJ_ENT_CACHE:"/> <!--这是通用的前缀-->
                    <constructor-arg name="expiration" value="720"/> <!--这里的单位是秒-->
                </bean>
            </set>
        </property>
    </bean>
    <bean id="customKeyGenerator" class="com.sofn.core.config.CustomKeyGenerator"></bean>

    <!-- 集群配置 -->
    <bean id="jedisClusterConfig" class="org.springframework.data.redis.connection.RedisClusterConfiguration">
        <property name="clusterNodes">
            <set>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster1.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster1.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster2.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster2.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster3.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster3.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster4.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster4.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster5.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster5.port}"></constructor-arg>
                </bean>
                <bean class="org.springframework.data.redis.connection.RedisClusterNode">
                    <constructor-arg name="host" value="${redis.cluster6.host}"></constructor-arg>
                    <constructor-arg name="port" value="${redis.cluster6.port}"></constructor-arg>
                </bean>
            </set>
        </property>
    </bean>
    <!-- Jedis线程 -->
    <bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="${redis.maxIdle}"/>
        <property name="minIdle" value="${redis.minIdle}"/>
        <property name="maxTotal" value="${redis.maxTotal}"/>
        <property name="testOnBorrow" value="true"/>
        <!--<property name="maxWaitMillis" value="${redis.pool.maxWait}" />
        <property name="testOnReturn" value="${redis.pool.testOnReturn}" />-->

        <!-- 配置其他连接属性 -->
        <property name="blockWhenExhausted" value="true"/>
        <property name="testWhileIdle" value="true"/>
        <property name="minEvictableIdleTimeMillis" value="60000"/>
        <property name="timeBetweenEvictionRunsMillis" value="30000"/>
        <property name="numTestsPerEvictionRun" value="-1"/>
    </bean>
    <!-- Redis连接池 本地测试环境用-->
    <bean id="jedisPoolConfigAlone" class="redis.clients.jedis.JedisPoolConfig">
        <property name="maxIdle" value="20"/>
        <property name="maxTotal" value="100"/>
        <property name="maxWaitMillis" value="100000"/>
        <property name="testOnBorrow" value="true"/>
    </bean>

    <!--////////////////////////////////////////////////////////////////////////////////////////-->
    <!-- Redis连接 本地单实例 本地测试环境用 -->
<!--    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">-->
<!--        <property name="hostName" value="localhost" />-->
<!--        <property name="port" value="6379" />-->
<!--        <property name="poolConfig" ref="jedisPoolConfigAlone" />-->
<!--    </bean>-->

    <!--////////////////////////////////////////////////////////////////////////////////////////-->

    <!-- Redis连接 集群方式 生产开发环境用 -->
    <bean id="jedisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
        <constructor-arg name="clusterConfig" ref="jedisClusterConfig" />
        <constructor-arg name="poolConfig" ref="jedisPoolConfig"/>
        <property name="password" value="${redis.password}"/>
    </bean>
    <!--////////////////////////////////////////////////////////////////////////////////////////-->

    <!-- 缓存序列化方式 -->
    <bean id="keySerializer" class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
    <bean id="valueSerializer" class="org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer"/>
    <bean id="jdkSerializer" class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />
    <!-- 缓存 redis 模板-->
    <bean id="redisTemplate" class="org.springframework.data.redis.core.RedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
        <property name="keySerializer" ref="keySerializer"/>
        <property name="valueSerializer" ref="valueSerializer"/>
        <property name="hashKeySerializer" ref="keySerializer"/>
        <property name="hashValueSerializer" ref="valueSerializer"/>
    </bean>

    <!-- 使用StringRedisTemplate 结果更加友好 用于普通的 k-v (string)-->
    <bean id="stringRedisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
        <property name="connectionFactory" ref="jedisConnectionFactory"/>
    </bean>

    <bean id="JacksonCodec" class="org.redisson.codec.JsonJacksonCodec"></bean>
    <!-- Redisson连接配置 -->
    <redisson:client id="redisson" codec-ref="JacksonCodec">
        <!-- 单节点服务器模式 -->
<!--        <redisson:single-server address="redis://127.0.0.1:6379" connection-pool-size="50"-->
<!--                                subscription-connection-pool-size="20"-->
<!--                                subscriptions-per-connection="10" />-->

        <!-- 集群模式 -->
        <redisson:cluster-servers master-connection-pool-size="${redis.maxTotal}"
                                  slave-connection-pool-size="${redis.maxTotal}"
                                  subscription-connection-pool-size="${redis.maxTotal}"
                                  subscriptions-per-connection="${redis.maxIdle}"
                                  password="${redis.password}">
            <redisson:node-address value="redis://${redis.cluster1.host}:${redis.cluster1.port}" />
            <redisson:node-address value="redis://${redis.cluster2.host}:${redis.cluster2.port}" />
            <redisson:node-address value="redis://${redis.cluster3.host}:${redis.cluster3.port}" />
            <redisson:node-address value="redis://${redis.cluster4.host}:${redis.cluster4.port}" />
            <redisson:node-address value="redis://${redis.cluster5.host}:${redis.cluster5.port}" />
            <redisson:node-address value="redis://${redis.cluster6.host}:${redis.cluster6.port}" />
        </redisson:cluster-servers>
    </redisson:client>
</beans>