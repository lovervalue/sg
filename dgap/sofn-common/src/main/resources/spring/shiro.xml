<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns="http://www.springframework.org/schema/beans"
       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd


		http://www.springframework.org/schema/util
		http://www.springframework.org/schema/util/spring-util.xsd"
       default-lazy-init="true">

    <description>Shiro Configuration</description>

    <!-- 拦截器使用对象,使用Spring注入 -->
    <!--<idubbo:reference id="sysUserProvider" interface="com.sofn.provider.sso.SysUserProvider" check="false"/>-->
    <!--<idubbo:reference id="sysSessionProvider" interface="com.sofn.provider.sso.SysSessionProvider" check="false"/>-->
    <!--<idubbo:reference id="sysAuthorizeProvider" interface="com.sofn.provider.sso.SysAuthorizeProvider" check="false"/>-->

    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <!--<bean id="realm" class="com.sofn.core.shiro.Realm" />-->
    <!--<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">-->
    <!--<property name="realm" ref="realm" />-->
    <!--</bean>-->

    <!-- 无状态 token Realm实现 -->
    <bean id="statelessRealm" class="com.sofn.core.shiro.StatelessRealm"/>

    <!-- Subject工厂 -->
    <bean id="subjectFactory" class="com.sofn.core.shiro.StatelessDefaultSubjectFactory"/>

    <!-- 会话管理器 -->
    <bean id="sessionManager" class="org.apache.shiro.session.mgt.DefaultSessionManager">
        <property name="sessionValidationSchedulerEnabled" value="false"/>
    </bean>

    <!-- 安全管理器 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="statelessRealm"/>
        <property name="subjectFactory" ref="subjectFactory"/>
        <property name="sessionManager" ref="sessionManager"/>
    </bean>

    <!-- 相当于调用SecurityUtils.setSecurityManager(securityManager) -->
    <bean
            class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
        <property name="staticMethod"
                  value="org.apache.shiro.SecurityUtils.setSecurityManager"/>
        <property name="arguments" ref="securityManager"/>
    </bean>

    <bean id="statelessAuthcFilter" class="com.sofn.core.shiro.StatelessAuthcFilter"/>

    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager"/>
        <property name="filters">
            <util:map>
                <entry key="statelessAuthc" value-ref="statelessAuthcFilter"/>
            </util:map>
        </property>
        <!-- 要求登录时的链接 -->
        <property name="loginUrl" value="/unauthorized"/>
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <property name="unauthorizedUrl" value="/forbidden"/>
        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- anon：它对应的过滤器里面是空的,什么都没做 -->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filterChainDefinitions">
            <value>
                /cache_test=anon
                /getUUID=anon
                /generatorImage=anon
                /regin=anon
                /login=anon
                /login_rpc=anon
                /login_sso=anon
                /logout=anon
                /*.ico=anon
                /upload/*=anon
                /unauthorized=anon
                /forbidden=anon
                /sns*=anon
                /*/api-docs=anon
                /callback*=anon
                /swagger*=anon
                /configuration/*=anon
                /*/configuration/*=anon
                /webjars/**=anon
                <!--/**=statelessAuthc,user-->
            </value>
        </property>
    </bean>
    <!-- Shiro生命周期处理器 -->
    <bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>
</beans>