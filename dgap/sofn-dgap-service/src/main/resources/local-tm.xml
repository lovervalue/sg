<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx-4.0.xsd">

    <bean id="dbPasswordCallback" class="com.sofn.core.config.DBPasswordCallback">
        <description>数据库连接回调密码解密</description>
    </bean>
    <bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter" lazy-init="true">
        <description>状态过滤器</description>
        <property name="slowSqlMillis" value="3000" />
        <property name="logSlowSql" value="true" />
        <property name="mergeSql" value="true" />
    </bean>
    <bean id="log-filter" class="com.alibaba.druid.filter.logging.Log4jFilter">
        <property name="resultSetLogEnabled" value="false" />
        <property name="statementExecutableSqlLogEnable" value="true" />
    </bean>
    <bean id="readDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <description>只读数据库连接</description>
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.reader.url}" />
        <property name="username" value="${db.reader.username}" />
        <property name="password" value="${db.reader.password}" />
        <!-- 初始化连接大小 -->
        <property name="initialSize" value="${db.initialSize}" />
        <!-- 连接池最大数量 -->
        <property name="maxActive" value="${db.maxActive}" />
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="${db.minIdle}" />
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="${db.maxWait}" />
        <!-- -->
        <property name="defaultReadOnly" value="true" />
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="filters" value="${druid.filters}" />
        <property name="connectionProperties" value="password=${db.reader.password}" />
        <property name="passwordCallback" ref="dbPasswordCallback" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />
        <property name="timeBetweenLogStatsMillis" value="60000" />
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
    </bean>
    <bean id="writeDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <description>只写数据库连接</description>
        <property name="driverClassName" value="${db.driver}" />
        <property name="url" value="${db.writer.url}" />
        <property name="username" value="${db.writer.username}" />
        <property name="password" value="${db.writer.password}" />
        <property name="initialSize" value="${db.initialSize}" />
        <property name="maxActive" value="${db.maxActive}" />
        <property name="minIdle" value="${db.minIdle}" />
        <property name="maxWait" value="${db.maxWait}" />
        <property name="defaultReadOnly" value="false" />
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="filters" value="${druid.filters}" />
        <property name="connectionProperties" value="password=${db.writer.password}" />
        <property name="passwordCallback" ref="dbPasswordCallback" />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />
        <property name="validationQuery" value="SELECT 1 FROM DUAL" />
        <property name="timeBetweenLogStatsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="${db.minEvictableIdleTimeMillis}" />
        <property name="timeBetweenEvictionRunsMillis" value="${db.timeBetweenEvictionRunsMillis}" />
    </bean>
    <bean id="dataSource" class="com.sofn.core.aspect.ChooseDataSource" lazy-init="true">
        <description>数据源</description>
        <property name="targetDataSources">
            <map key-type="java.lang.String" value-type="javax.sql.DataSource">
                <!-- write -->
                <entry key="write" value-ref="writeDataSource" />
                <!-- read -->
                <entry key="read" value-ref="readDataSource" />
            </map>
        </property>
        <property name="defaultTargetDataSource" ref="writeDataSource" />
        <property name="methodType">
            <map key-type="java.lang.String">
                <!-- read -->
                <entry key="read" value=",get,select,count,list,query," />
                <!-- write -->
                <entry key="write" value=",add,insert,create,update,delete,remove," />
            </map>
        </property>
    </bean>
    <!--切面 -->
    <bean class="com.sofn.core.aspect.DataSourceAspect" />

    <bean class="org.springframework.jdbc.core.JdbcTemplate">
        <constructor-arg ref="dataSource" />
    </bean>

    <!-- mybatis settings -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <description>spring和MyBatis完美整合，不需要mybatis的配置映射文件</description>
        <property name="dataSource" ref="dataSource"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <!-- 自动扫描mapping.xml文件 -->
        <property name="mapperLocations" value="classpath:mappers/*/*.xml" />
    </bean>

    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
        <property name="basePackage" value="com.sofn" />
        <property name="annotationClass"
                  value="com.sofn.core.annotation.MyBatisDao" />
    </bean>

    <!-- 事务 -->
    <bean id="transactionManager"
          class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- pre and dw settings -->

    <!-- 数据仓库和前置机数据库的数据源配置-->
    <bean id="dwDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <description>数据仓库数据源配置</description>
        <property name="driverClassName" value="${db.dw.driver}" />
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="url" value="${db.dw.url}" />
        <property name="username" value="${db.dw.username}" />
        <property name="password" value="${db.dw.password}" />
        <property name="connectionProperties" value="password=${db.dw.password};remarksReporting=true" />
        <property name="passwordCallback" ref="dbPasswordCallback" />
    </bean>

    <bean id="preDataSource" class="com.alibaba.druid.pool.DruidDataSource"
          destroy-method="close" init-method="init" lazy-init="true">
        <description>前置数据库连接</description>
        <property name="driverClassName" value="${db.pre.driver}" />
        <property name="proxyFilters">
            <list>
                <ref bean="stat-filter" />
                <ref bean="log-filter"/>
            </list>
        </property>
        <property name="url" value="${db.pre.url}" />
        <property name="username" value="${db.pre.username}" />
        <property name="password" value="${db.pre.password}" />
        <property name="connectionProperties" value="password=${db.pre.password};remarksReporting=true" />
        <property name="passwordCallback" ref="dbPasswordCallback" />
    </bean>

    <!-- 配置jdbcTemplate -->
    <bean id="dwJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dwDataSource"></property>
    </bean>
    <bean id="preJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="preDataSource"></property>
    </bean>

    <bean id="preTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <qualifier value="dataImportManager"/>
        <property name="dataSource" ref="preDataSource"/>
    </bean>

    <bean id="dwTM" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dwDataSource"/>
    </bean>
    <!-- 使用注解配置spring事务 -->
    <tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true"/>

</beans>